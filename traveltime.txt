const template = `
<div>
  <div class="form-group">
    <label for="lyInput">Enter Distance (Light Years):</label>
    <input type="number" id="lyInput" name="lyInput" min="0" step="0.01" style="width: 100%;" />
  </div>
  <div class="form-group">
    <label for="warpSelect">Select Warp Factor:</label>
    <select id="warpSelect" name="warpSelect" style="width: 100%;">
      ${[...Array(20)].map((_, i) => {
        const warp = (i <= 9) ? i : (9 + (i - 9) * 0.1).toFixed(1);
        return `<option value="${warp}">Warp ${warp}</option>`;
      }).join('')}
    </select>
  </div>
  <div class="form-group">
    <label for="eraSelect">Select Era:</label>
    <select id="eraSelect" name="eraSelect" style="width: 100%;">
      <option value="tos">TOS (Original Series)</option>
      <option value="tng">TNG (Next Generation)</option>
    </select>
  </div>
</div>
`;

const formData = await foundry.applications.api.DialogV2.wait({
  window: { title: "Warp Travel Time Calculator" },
  position: { height: 'auto', width: 450 },
  content: template,
  classes: ['dialogue'],
  buttons: [{
    action: 'calculate',
    default: true,
    label: "Calculate Travel Time",
    callback: (event, button, dialog) => {
      const lyInput = parseFloat(dialog.element.querySelector("#lyInput")?.value);
      const warp = parseFloat(dialog.element.querySelector("#warpSelect")?.value);
      const era = dialog.element.querySelector("#eraSelect")?.value;

      if (isNaN(lyInput) || lyInput <= 0) {
        ui.notifications.warn("Please enter a valid number of light years.");
        return false;
      }

      if (isNaN(warp) || warp < 1) {
        ui.notifications.warn("Please select a valid warp factor.");
        return false;
      }

      const travelYears = calculateTravelTime(lyInput, warp, era);

      if (travelYears === null) {
        ui.notifications.error("Could not calculate travel time.");
        return false;
      }

      const timeStr = formatTime(travelYears);

      ChatMessage.create({
        user: game.user.id,
        speaker: ChatMessage.getSpeaker(),
        content: `
          <strong>Distance:</strong> ${lyInput} light years<br>
          <strong>Warp Factor:</strong> ${warp}<br>
          <strong>Era:</strong> ${era.toUpperCase()}<br>
          <strong>Estimated Travel Time:</strong><br>
          ${travelYears.toFixed(4)} years<br>
          <em>${timeStr}</em>
        `
      });

      return true;
    }
  }],
  close: () => null
});

if (!formData) return;

function calculateTravelTime(lightYears, warpFactor, era) {
  if (warpFactor < 1) return null;

  let speed;

  switch (era) {
    case "tos":
      speed = Math.pow(warpFactor, 3);
      break;

    case "tng":
      if (warpFactor < 9) {
        speed = Math.pow(warpFactor, 10 / 3);
      } else {
        speed = Math.pow((10 / (10 - warpFactor)), 10);
      }
      break;

    default:
      return null;
  }

  return lightYears / speed;
}

function formatTime(years) {
  const totalDays = Math.round(years * 365.25);
  const y = Math.floor(totalDays / 365.25);
  const remainingDays = totalDays - Math.round(y * 365.25);
  const m = Math.floor(remainingDays / 30.44);
  const d = Math.round(remainingDays - m * 30.44);

  const parts = [];
  if (y > 0) parts.push(`${y} year${y !== 1 ? 's' : ''}`);
  if (m > 0) parts.push(`${m} month${m !== 1 ? 's' : ''}`);
  if (d > 0 || parts.length === 0) parts.push(`${d} day${d !== 1 ? 's' : ''}`);

  return parts.join(', ');
}